this is a format string vuulnerability

the source code uses stdio.hh library so it has system call
we need to call this function with "sh\0" value

before we are passing the user string to the printf we are collecting the user string with snprintf
    The printf function writes the formatted output to the console, and does not need to terminate it with a null byte. The snprintf function writes the formatted output to a string buffer, and needs to terminate it with a null byte to mark the end of the string
    so if we want to store address on the stack we need to store it after the exploit(or with B)

Plan for exploit
    change the pow got table entry to main start address
        with this we will keep getting the format string vulnerability
    get the runtime address of libc and then runtime address of system
        to find the libc version used in remote
            we can check the difference in address of plts of different fucntions(like atoi and pow) and match with different versions of libc
            we can also look into the docker file provided in the picoCTF
                the docker file mentions of using tools of ubuntu with a particular version sha(Ubuntu 20.04)
                the libc version stored in this version of ubuntu is 2.31
            we can also run ldd ./chall to see the version 
                linux-vdso.so.1 (0x00007fff091cf000)
                libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f6878ee9000)
                libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6878d08000)
                ld-2.31.so => /lib64/ld-linux-x86-64.so.2 (0x00007f6878fe8000)
            wget http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/libc6_2.31-0ubuntu9_amd64.deb  
            dpkg-deb -x ./libc6_2.31-0ubuntu9_amd64.deb data
        puts_address - puts_offset + system_offset
    change the atoi got entry with system runtime address
    send "/bin/sh" as A which will be sent to atoi
    store the exploit in A and the address needed in B

gdb analysis to get necessary addresses
    got address of pow - 0x601040
        disassemble pow 
    got address of atoi - 0x601058
        disassemble atoi 
    stack pointer on printf - 0x7fffffffd9c0
        breakpoint on 0x4009d2
    stack pointer on ret from main - 0x7fffffffdcf8
        breakpoint on 0x400ac3
    start of main function - 0x400837(4196407)
        disassemble main
    plt address of system - 0x40e420
        we need to calculate it with libc database offset value on runtime
    plt address of atoi - 0x400740
        disassemble atoi 
    position of the B string - 43

payload analysis
    to call main from pow got - %4196386c%43$n
        we need to write 4196407 characters but 21 characters are already written
        4196407 - 21 = 4196386 
    to find the address of system libc
        we need to find the value stored in the atoi GOT entry 
        we will use %s to print the value and get the value of the atoi libc
        for system libc we can use the offset for libc2.31
    to write the atoi GOT to system GOT
        same as first step

for gdb analysis
    make args.debug true and ctrl+c to use gdb
    
flag - picoCTF{f3rm4t_pwn1ng_s1nc3_th3_17th_c3ntury}